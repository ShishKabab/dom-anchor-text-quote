{"version":3,"sources":["dom-anchor-text-quote.js"],"names":["global","factory","define","amd","exports","module","require","mod","DiffMatchPatch","TextPositionAnchor","domAnchorTextQuote","this","_diffMatchPatch","_domAnchorTextPosition","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_DiffMatchPatch","_TextPositionAnchor","CONTEXT_LENGTH","TextQuoteAnchor","root","exact","context","arguments","undefined","Error","prefix","suffix","value","options","toPositionAnchor","toRange","selector","type","hint","dmp","Match_Distance","textContent","slices","match","loc","start","Number","POSITIVE_INFINITY","end","NEGATIVE_INFINITY","result","_result","match_main","firstSlice","shift","foldSlices","acc","slice","Math","min","max","reduce","range","position","fromRange","fromPositionAnchor","anchor","substr","prefixStart","suffixEnd"],"mappings":"CAAA,SAAWA,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,UAAW,SAAU,mBAAoB,4BAA6BD,OACzE,IAAuB,mBAAZG,UAA6C,mBAAXC,QAClDJ,EAAQG,QAASC,OAAQC,QAAQ,oBAAqBA,QAAQ,iCACzD,CACL,GAAIC,IACFH,WAEFH,GAAQM,EAAIH,QAASG,EAAKP,EAAOQ,eAAgBR,EAAOS,oBACxDT,EAAOU,mBAAqBH,EAAIH,UAEjCO,KAAM,SAAUP,EAASC,EAAQO,EAAiBC,GACnD,YAIA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAAWF,GAEzF,QAASG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAJhH,GAAIC,GAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MAM7hBkB,EAAkBxB,EAAuBF,GAEzC2B,EAAsBzB,EAAuBD,GAnB7C2B,EAAiB,GAGFC,EAAe,WACvB,QADQA,GACPC,EAAMC,GAsBd,GAtBqBC,GAAOC,UAAAlB,QAAA,GAAAmB,SAAAD,UAAA,MAAKA,UAAA,EACnC,IAuBE3B,EAAgBP,KAzBD8B,GAEJK,SAATJ,EACF,KAAM,IAAIK,OAAM,oCAElB,IAAcD,SAAVH,EACF,KAAM,IAAII,OAAM,qCAElBpC,MAAK+B,KAAOA,EACZ/B,KAAKgC,MAAQA,EACbhC,KAAKqC,OAASJ,EAAQI,OACtBrC,KAAKsC,OAASL,EAAQK,OAmJtB,MAvHA3B,GAvCiBmB,IAwCfP,IAAK,UACLgB,MACG,SAACC,GACN,MAAOxC,MAAKyC,iBAAiBD,GAASE,aAEpCnB,IAAK,aACLgB,MAAM,WACR,GAAII,IACFC,KAAM,oBACNZ,MAAOhC,KAAKgC,MAId,OAFoBG,UAAhBnC,KAAKqC,SAAsBM,EAASN,OAASrC,KAAKqC,QAClCF,SAAhBnC,KAAKsC,SAAsBK,EAASL,OAAStC,KAAKsC,QAC/CK,KAGLpB,IAAK,mBACLgB,MADY,WAEV,GAFWC,GAAON,UAAAlB,QAAA,GAAAmB,SAAAD,UAAA,MAAKA,UAAA,GACtBW,EAAQL,EAARK,KACDd,EAAO/B,KAAK+B,KACZe,EAAM,GAAAnB,GAAA,UAEVmB,GAAIC,eAA2C,EAA1BhB,EAAKiB,YAAYhC,MAItC,IAAIiC,GAASjD,KAAKgC,MAAMkB,MAAM,qBAC1BC,EAAgBhB,SAATU,EAAuBd,EAAMiB,YAAYhC,OAAS,EAAK,EAAK6B,EACnEO,EAAQC,OAAOC,kBACfC,EAAMF,OAAOG,kBACbC,EAAS,EAGb,IAAoBtB,SAAhBnC,KAAKqC,OAAsB,CAC7B,GAAIqB,GAASZ,EAAIa,WAAW5B,EAAKiB,YAAahD,KAAKqC,OAAQc,EACvDO,GAAS,KAAIP,EAAMO,EAAS1D,KAAKqC,OAAOrB,QAI9C,GAAe,KAAXyC,EAAe,CACjB,GAAIG,GAAaX,EAAOY,OAExB,IADAJ,EAASX,EAAIa,WAAW5B,EAAKiB,YAAaY,EAAYT,KAClDM,EAAS,IAIX,KAAM,IAAIrB,OAAM,iBAHhBgB,GAAQK,EACRN,EAAMI,EAAMH,EAAQQ,EAAW5C,OAOnC,GAAI8C,GAAa,SAACC,EAAKC,GACrB,GAAIP,GAASX,EAAIa,WAAW5B,EAAKiB,YAAagB,EAAOD,EAAIZ,IACzD,IAAe,KAAXM,EACF,KAAM,IAAIrB,OAAM,iBAUlB,OANA2B,GAAIZ,IAAMM,EAASO,EAAMhD,OAGzB+C,EAAIX,MAAQa,KAAKC,IAAIH,EAAIX,MAAOK,GAChCM,EAAIR,IAAMU,KAAKE,IAAIJ,EAAIR,IAAKE,EAASO,EAAMhD,QAEpC+C,EAMTjB,GAAIC,eAAiB,EACrB,IAAIgB,GAAMd,EAAOmB,OAAON,GACtBV,MAAOA,EACPG,IAAKA,EACLJ,IAAKA,GAGP,OAAO,IAAAvB,GAAA,WAAuBG,EAAMgC,EAAIX,MAAOW,EAAIR,UAMjDhC,IAAK,YACLgB,MA7GY,SAACR,EAAMsC,GACrB,GAAclC,SAAVkC,EACF,KAAM,IAAIjC,OAAM,qCAGlB,IAAIkC,GAAW1C,EAAA,WAAmB2C,UAAUxC,EAAMsC,EAClD,OAAOrE,MAAKwE,mBAAmBF,MAgH7B/C,IAAK,eACLgB,MA9Ge,SAACR,GA+Gd,GA/GoBY,GAAQT,UAAAlB,QAAA,GAAAmB,SAAAD,UAAA,MAAKA,UAAA,EACrC,OAAO,IAAIJ,GAAgBC,EAAMY,EAASX,MAAOW,MAmH/CpB,IAAK,qBACLgB,MAjHqB,SAACkC,GACxB,GAAI1C,GAAO0C,EAAO1C,KAEbqB,EAAcqB,EAAdrB,MAAOG,EAAOkB,EAAPlB,IACRvB,EAAQD,EAAKiB,YAAY0B,OAAOtB,EAAOG,EAAMH,GAE7CuB,EAAcV,KAAKE,IAAI,EAAGf,EAAQvB,GAClCQ,EAASN,EAAKiB,YAAY0B,OAAOC,EAAavB,EAAQuB,GAEtDC,EAAYX,KAAKC,IAAInC,EAAKiB,YAAYhC,OAAQuC,EAAM1B,GACpDS,EAASP,EAAKiB,YAAY0B,OAAOnB,EAAKqB,EAAYrB,EAEtD,OAAO,IAAIzB,GAAgBC,EAAMC,GAAQK,OAAAA,EAAQC,OAAAA,QAvChCR,IAiKnBpC,GAAOD,QAjKYqC","file":"dom-anchor-text-quote.min.js","sourcesContent":["import DiffMatchPatch from 'diff-match-patch';\nimport TextPositionAnchor from 'dom-anchor-text-position';\n\n// The DiffMatchPatch bitap has a hard 32-character pattern length limit.\nconst CONTEXT_LENGTH = 32;\n\n\nexport default class TextQuoteAnchor {\n  constructor(root, exact, context = {}) {\n    if (root === undefined) {\n      throw new Error('missing required parameter \"root\"');\n    }\n    if (exact === undefined) {\n      throw new Error('missing required parameter \"exact\"');\n    }\n    this.root = root;\n    this.exact = exact;\n    this.prefix = context.prefix;\n    this.suffix = context.suffix;\n  }\n\n  static fromRange(root, range) {\n    if (range === undefined) {\n      throw new Error('missing required parameter \"range\"');\n    }\n\n    let position = TextPositionAnchor.fromRange(root, range);\n    return this.fromPositionAnchor(position);\n  }\n\n  static fromSelector(root, selector = {}) {\n    return new TextQuoteAnchor(root, selector.exact, selector);\n  }\n\n  static fromPositionAnchor(anchor) {\n    let root = anchor.root;\n\n    let {start, end} = anchor;\n    let exact = root.textContent.substr(start, end - start);\n\n    let prefixStart = Math.max(0, start - CONTEXT_LENGTH);\n    let prefix = root.textContent.substr(prefixStart, start - prefixStart);\n\n    let suffixEnd = Math.min(root.textContent.length, end + CONTEXT_LENGTH);\n    let suffix = root.textContent.substr(end, suffixEnd - end);\n\n    return new TextQuoteAnchor(root, exact, {prefix, suffix});\n  }\n\n  toRange(options) {\n    return this.toPositionAnchor(options).toRange();\n  }\n\n  toSelector() {\n    let selector = {\n      type: 'TextQuoteSelector',\n      exact: this.exact,\n    };\n    if (this.prefix !== undefined) selector.prefix = this.prefix;\n    if (this.suffix !== undefined) selector.suffix = this.suffix;\n    return selector;\n  }\n\n  toPositionAnchor(options = {}) {\n    let {hint} = options;\n    let root = this.root;\n    let dmp = new DiffMatchPatch();\n\n    dmp.Match_Distance = root.textContent.length * 2;\n\n    // Work around a hard limit of the DiffMatchPatch bitap implementation.\n    // The search pattern must be no more than 32 characters.\n    let slices = this.exact.match(/(.|[\\r\\n]){1,32}/g);\n    let loc = (hint === undefined) ? ((root.textContent.length / 2) | 0) : hint;\n    let start = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    let result = -1;\n\n    // If the prefix is known then search for that first.\n    if (this.prefix !== undefined) {\n      let result = dmp.match_main(root.textContent, this.prefix, loc);\n      if (result > -1) loc = result + this.prefix.length;\n    }\n\n    // If the prefix was not found, search for the first slice.\n    if (result === -1) {\n      let firstSlice = slices.shift();\n      result = dmp.match_main(root.textContent, firstSlice, loc);\n      if (result > -1) {\n        start = result;\n        loc = end = start + firstSlice.length;\n      } else {\n        throw new Error('no match found');\n      }\n    }\n\n    // Create a fold function that will reduce slices to positional extents.\n    let foldSlices = (acc, slice) => {\n      let result = dmp.match_main(root.textContent, slice, acc.loc);\n      if (result === -1) {\n        throw new Error('no match found');\n      }\n\n      // The next slice should follow this one closely.\n      acc.loc = result + slice.length;\n\n      // Expand the start and end to a quote that includes all the slices.\n      acc.start = Math.min(acc.start, result);\n      acc.end = Math.max(acc.end, result + slice.length);\n\n      return acc;\n    };\n\n    // Use the fold function to establish the full quote extents.\n    // Expect the slices to be close to one another.\n    // This distance is deliberately generous for now.\n    dmp.Match_Distance = 64;\n    let acc = slices.reduce(foldSlices, {\n      start: start,\n      end: end,\n      loc: loc,\n    });\n\n    return new TextPositionAnchor(root, acc.start, acc.end);\n  }\n}\n"],"sourceRoot":"./"}